// Copyright (C) 2021-2023, HardenedVault Limited (https://hardenedvault.net)

#include <fstream>
#include <iostream>
#include <iomanip>
#include <string>

#include "bcc_version.h"
#include "bcc_syms.h"
#include "BPF.h"


#define WCFI_CALLSITE_FLAG 0x1
#define WCFI_EXCASM_FLAG 0x2


class BPFExploitDetect {
    ebpf::BPF *bpf;

    const std::string wcfi_program; // stack corrupt exploit detect
    const std::string psd_program; // privilege escalation detect

    std::vector<std::string> wcfi_hooks;
    std::vector<std::string> psd_hooks;

    ebpf::BPFPerfBuffer *perf_buffer;
    ebpf::BPFStackTable *wcfi_stacks; // stack table of kernel
    ebpf::BPFHashTable<unsigned, uint8_t> *wcfi_callsite_bitmap;

    unsigned long wcfi_kstext;
    unsigned long wcfi_ketext;
    std::vector<unsigned> *wcfi_callsite;

    void *wcfi_ksyms; // kernel symbols

public:
    int bpf_program_init(const std::string bpf_wcfi/*, std::string psd_program*/);

    int bpf_wcfi_hooks_init(int count, char ** funcs, std::string hooks);

    void bpf_wcfi_stack_init(std::string stack);
    std::vector<uintptr_t> bpf_wcfi_get_stack_addr(int id);

    int bpf_wcfi_callsite_bitmap_init(unsigned stext, unsigned etext, unsigned long init_stack);
    void bpf_wcfi_callsite_bitmap_update(unsigned long addr, uint8_t flags);

    int bpf_wcfi_ksyms_init(void);
    void bpf_wcfi_ksyms_refresh(void);
    std::string bpf_wcfi_ksyms_resolve(unsigned long ip);
    std::string bpf_wcfi_ksyms_info(unsigned long ip);
    unsigned long bpf_wcfi_ksyms_resolve_name(const char *module, const char *name);
    std::vector<unsigned long> bpf_wcfi_ksyms_list_address(std::map<std::string, bool>);
    void bpf_wcfi_text(unsigned long *start, unsigned long *end);

    int bpf_wcfi_perf_buffer_init(std::string stack, void (*)(void *, void *, int));
    void bpf_wcfi_perf_poll(void);
};


struct wcfi_event_t {
    int pid;
#define WCFI_TASK_COMM_LEN 0x20
    char name[WCFI_TASK_COMM_LEN];
    int kernel_stack;
    unsigned long reg_sp;
    unsigned long current_sp;
    unsigned long ip;
    unsigned long time;
};

struct psd_event_t {
    int pid;
#define WCFI_TASK_COMM_LEN 0x20
    char name[WCFI_TASK_COMM_LEN];
    unsigned long ip; // which hooks
    unsigned long cred_p;
    
};
